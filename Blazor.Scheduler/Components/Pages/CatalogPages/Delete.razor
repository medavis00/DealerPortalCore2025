@page "/catalogs/delete"
@using Microsoft.EntityFrameworkCore
@using Blazor.Scheduler.Entities
@inject IDbContextFactory<SchedulerDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Catalog</h2>
    <hr />
    @if (catalog is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@catalog.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Author</dt>
            <dd class="col-sm-10">@catalog.Author</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">InstructorName</dt>
            <dd class="col-sm-10">@catalog.InstructorName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateOffered</dt>
            <dd class="col-sm-10">@catalog.DateOffered</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LengthInMinutes</dt>
            <dd class="col-sm-10">@catalog.LengthInMinutes</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@catalog.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TotalNumberOfStudents</dt>
            <dd class="col-sm-10">@catalog.TotalNumberOfStudents</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MaximumCapacity</dt>
            <dd class="col-sm-10">@catalog.MaximumCapacity</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TeamsMeetingLink</dt>
            <dd class="col-sm-10">@catalog.TeamsMeetingLink</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ReplayLink</dt>
            <dd class="col-sm-10">@catalog.ReplayLink</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsLive</dt>
            <dd class="col-sm-10">@catalog.IsLive</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EnrollmentStatus</dt>
            <dd class="col-sm-10">@catalog.EnrollmentStatus</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Topic</dt>
            <dd class="col-sm-10">@catalog.Topic</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Tags</dt>
            <dd class="col-sm-10">@catalog.Tags</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@catalog.CreatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedAt</dt>
            <dd class="col-sm-10">@catalog.UpdatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@catalog.IsActive</dd>
        </dl>
        <EditForm method="post" Model="catalog" OnValidSubmit="DeleteCatalog" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(catalog is null)">Delete</button> |
            <a href="/catalogs">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Catalog? catalog;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        catalog = await context.Catalog.FirstOrDefaultAsync(m => m.Id == Id);

        if (catalog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCatalog()
    {
        using var context = DbFactory.CreateDbContext();
        context.Catalog.Remove(catalog!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/catalogs");
    }
}
