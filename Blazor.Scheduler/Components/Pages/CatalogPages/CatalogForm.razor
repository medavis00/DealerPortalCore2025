@page "/catalog-form"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Blazor.Scheduler.Entities
@inject IDbContextFactory<SchedulerDbContext> DbFactory
@inject NavigationManager NavigationManager

<h3>Catalog Form</h3>

<EditForm Model="@catalog" FormName="CatalogForm" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="catalog.Title" />
        <ValidationMessage For="@(() => catalog.Title)" />
    </div>

    <div class="form-group">
        <label for="author">Author</label>
        <InputText id="author" class="form-control" @bind-Value="catalog.Author" />
        <ValidationMessage For="@(() => catalog.Author)" />
    </div>

    <div class="form-group">
        <label for="instructor">Instructor Name</label>
        <InputText id="instructor" class="form-control" @bind-Value="catalog.InstructorName" />
        <ValidationMessage For="@(() => catalog.InstructorName)" />
    </div>

    <div class="form-group">
        <label for="dateOffered">Date Offered</label>
        <InputDate id="dateOffered" class="form-control" @bind-Value="catalog.DateOffered" />
        <ValidationMessage For="@(() => catalog.DateOffered)" />
    </div>

    <div class="form-group">
        <label for="length">Length (Minutes)</label>
        <InputSelect id="length" class="form-control" @bind-Value="catalog.LengthSelector">
            @foreach (var option in Catalog.GetLengthOptions)
            {
                <option value="@option">@option</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => catalog.LengthSelector)" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="catalog.Description" />
        <ValidationMessage For="@(() => catalog.Description)" />
    </div>

    <div class="form-group">
        <label for="totalStudents">Total Number of Students</label>
        <InputNumber id="totalStudents" class="form-control" @bind-Value="catalog.TotalNumberOfStudents" />
        <ValidationMessage For="@(() => catalog.TotalNumberOfStudents)" />
    </div>

    <div class="form-group">
        <label for="maxCapacity">Maximum Capacity</label>
        <InputNumber id="maxCapacity" class="form-control" @bind-Value="catalog.MaximumCapacity" />
        <ValidationMessage For="@(() => catalog.MaximumCapacity)" />
    </div>

    <div class="form-group">
        <label for="teamsLink">Teams Meeting Link</label>
        <InputText id="teamsLink" class="form-control" @bind-Value="catalog.TeamsMeetingLink" />
        <ValidationMessage For="@(() => catalog.TeamsMeetingLink)" />
    </div>

    <div class="form-group">
        <label for="replayLink">Replay Link</label>
        <InputText id="replayLink" class="form-control" @bind-Value="catalog.ReplayLink" />
        <ValidationMessage For="@(() => catalog.ReplayLink)" />
    </div>

    <div class="form-group">
        <label for="isLive">Is Live</label>
        <InputCheckbox id="isLive" class="form-check-input" @bind-Value="catalog.IsLive" />
        <ValidationMessage For="@(() => catalog.IsLive)" />
    </div>

    <div class="form-group">
        <label for="enrollment">Enrollment Status</label>
        <InputSelect id="enrollment" class="form-control" @bind-Value="catalog.EnrollmentSelector">
            @foreach (var option in Catalog.GetEnrollmentOptions)
            {
                <option value="@option">@option</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => catalog.EnrollmentSelector)" />
    </div>

    <div class="form-group">
        <label for="topic">Topic</label>
        <InputSelect id="topic" class="form-control" @bind-Value="catalog.TopicSelector">
            @foreach (var option in Catalog.GetTopicOptions)
            {
                <option value="@option">@option</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => catalog.TopicSelector)" />
    </div>

    <div class="form-group">
        <label for="tags">Tags</label>
        <InputText id="tags" class="form-control" @bind-Value="catalog.Tags" />
        <ValidationMessage For="@(() => catalog.Tags)" />
        <small class="form-text text-muted">e.g., "beginner, PADI, safety"</small>
    </div>

    <div class="form-group">
        <label for="createdAt">Created At</label>
        <InputDate id="createdAt" class="form-control" @bind-Value="catalog.CreatedAt" />
        <ValidationMessage For="@(() => catalog.CreatedAt)" />
    </div>

    <div class="form-group">
        <label for="updatedAt">Updated At</label>
        <InputDate id="updatedAt" class="form-control" @bind-Value="catalog.UpdatedAt" />
        <ValidationMessage For="@(() => catalog.UpdatedAt)" />
    </div>

    <div class="form-group">
        <label for="isActive">Is Active</label>
        <InputCheckbox id="isActive" class="form-check-input" @bind-Value="catalog.IsActive" />
        <ValidationMessage For="@(() => catalog.IsActive)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (submitted)
{
    <div class="alert alert-success mt-3">
        <p>Submitted Catalog:</p>
        <ul>
            <li>ID: @catalog.Id</li>
            <li>Title: @catalog.Title</li>
            <li>Author: @catalog.Author</li>
            <li>Instructor Name: @catalog.InstructorName</li>
            <li>Date Offered: @catalog.DateOffered.ToShortDateString()</li>
            <li>Length: @catalog.LengthInMinutes minutes</li>
            <li>Description: @catalog.Description</li>
            <li>Total Number of Students: @catalog.TotalNumberOfStudents</li>
            <li>Maximum Capacity: @(catalog.MaximumCapacity.HasValue ? catalog.MaximumCapacity.Value.ToString() : "Not Set")</li>
            <li>Teams Meeting Link: @catalog.TeamsMeetingLink</li>
            <li>Replay Link: @catalog.ReplayLink</li>
            <li>Is Live: @catalog.IsLive</li>
            <li>Enrollment Status: @catalog.EnrollmentStatus</li>
            <li>Topic: @catalog.Topic</li>
            <li>Tags: @catalog.Tags</li>
            <li>Created At: @catalog.CreatedAt.ToShortDateString()</li>
            <li>Updated At: @(catalog.UpdatedAt.HasValue ? catalog.UpdatedAt.Value.ToShortDateString() : "Not Set")</li>
            <li>Is Active: @catalog.IsActive</li>
        </ul>
    </div>
}

<!-- Debugging: Show current state of catalog before submission -->
<div class="mt-3">
    <h4>Current Catalog State (Before Submit):</h4>
    <p>Title: @catalog.Title</p>
    <p>Author: @catalog.Author</p>
    <p>Enrollment Status: @catalog.EnrollmentStatus</p>
    <p>Length: @catalog.LengthInMinutes</p>
    <p>Topic: @catalog.Topic</p>
</div>

@code {
    private Catalog catalog = new Catalog();
    private bool submitted = false;

    private void HandleSubmit()
    {
        submitted = true;
        // Here you would typically save to a database via a service
        // e.g., await CatalogService.SaveCatalog(catalog);
        Console.WriteLine($"Submitting: Title={catalog.Title}, Author={catalog.Author}, Enrollment={catalog.EnrollmentStatus}");
        submitted = true;
        StateHasChanged(); // Ensure UI updates after submission


    }

    protected override void OnInitialized()
    {
        // Ensure catalog is initialized only once
        catalog = catalog ?? new Catalog();
    }
}

}