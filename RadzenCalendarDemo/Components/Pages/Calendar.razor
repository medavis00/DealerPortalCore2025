@page "/calendar"
@rendermode InteractiveServer

@using Radzen
@using Radzen.Blazor

<h3>Radzen Blazor Scheduler</h3>
@* 
<RadzenScheduler Data="@Events"
                 StartProperty="Start"
                 EndProperty="End"
                 TextProperty="Title"
                 @bind-Date="currentDate"
                 @bind-View="currentView"
                 SlotDuration="TimeSpan.FromMinutes(30)"
                 ShowTodayButton="true"
                 ShowViewButtons="true"
                 ShowDatePicker="true"
                 ShowTimeZone="true"
                 ShowCurrentTimeIndicator="true"
                 ShowWeekend="true"
                 AllowCreate="true"
                 AllowDelete="true"
                 AllowEdit="true"
                 @OnSlotSelect="OnSlotSelect"
                 @OnAppointmentSelect="OnAppointmentSelect"
                 @OnAppointmentUpdate="OnAppointmentUpdate">
</RadzenScheduler>
 *@
@code {
    // private DateTime currentDate = DateTime.Today;
    // private SchedulerView currentView = SchedulerView.Week;

    // private List<EventModel> Events = new List<EventModel>
    // {
    //     new EventModel { Id = 1, Title = "Meeting", Start = DateTime.Today.AddHours(9), End = DateTime.Today.AddHours(10) },
    //     new EventModel { Id = 2, Title = "Workshop", Start = DateTime.Today.AddDays(1).AddHours(14), End = DateTime.Today.AddDays(1).AddHours(16) }
    // };

    // private void OnSlotSelect(SchedulerSlotSelectEventArgs args)
    // {
    //     Console.WriteLine($"Slot selected: {args.Start} - {args.End}");
    //     Events.Add(new EventModel { Id = Events.Count + 1, Title = "New Event", Start = args.Start, End = args.End });
    // }

    // private void OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<EventModel> args)
    // {
    //     Console.WriteLine($"Selected event: {args.Data.Title}");
    // }

    // private void OnAppointmentUpdate(SchedulerAppointmentUpdateEventArgs<EventModel> args)
    // {
    //     var eventToUpdate = Events.FirstOrDefault(e => e.Id == args.Data.Id);
    //     if (eventToUpdate != null)
    //     {
    //         eventToUpdate.Start = args.Start;
    //         eventToUpdate.End = args.End;
    //     }
    // }

    // private class EventModel
    // {
    //     public int Id { get; set; }
    //     public string Title { get; set; }
    //     public DateTime Start { get; set; }
    //     public DateTime End { get; set; }
    // }
}
