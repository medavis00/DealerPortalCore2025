@page "/loginpage"
@inject BlazorApp.Registration.Services.IAuthService AuthService
@inject NavigationManager NavigationManager

@using System.ComponentModel.DataAnnotations

<div class="container mx-auto p-4 max-w-md">
    <h2 class="text-2xl font-bold mb-6 text-center">Login</h2>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="space-y-4">
        <DataAnnotationsValidator />

        <!-- Honeypot field (hidden from users, bots might fill it) -->
        <div class="hidden">
            <InputText id="website" @bind-Value="loginModel.Website" />
        </div>

        <div class="form-group">
            <label for="username" class="block text-sm font-medium">Username</label>
            <InputText id="username"
                       @bind-Value="loginModel.Username"
                       class="w-full p-2 border rounded"
                       @oninput="HandleInput"
                       @onmousemove="HandleMouseMove" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div class="form-group">
            <label for="password" class="block text-sm font-medium">Password</label>
            <InputText type="password"
                       id="password"
                       @bind-Value="loginModel.Password"
                       class="w-full p-2 border rounded"
                       @oninput="HandleInput" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit"
                class="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600 disabled:opacity-50"
                disabled="@isSubmitting">
            @if (isSubmitting)
            {
                <span>Processing...</span>
            }
            else
            {
                <span>Login</span>
            }
        </button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-red-500 text-center mt-4">
                @errorMessage
            </div>
        }
    </EditForm>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private BotDetection botDetection = new();

    private async Task HandleLogin()
    {
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;

            // Check bot detection criteria
            if (IsBotDetected())
            {
                errorMessage = "Suspicious activity detected. Please try again.";
                return;
            }

            var result = await AuthService.LoginAsync(loginModel);
            if (result.Success)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred. Please try again.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        botDetection.RegisterKeyPress();
    }

    private void HandleMouseMove()
    {
        botDetection.RegisterMouseMovement();
    }

    private bool IsBotDetected()
    {
        // Check honeypot field
        if (!string.IsNullOrEmpty(loginModel.Website))
            return true;

        // Check for suspicious behavior
        if (botDetection.KeyPressCount < 3 || botDetection.MouseMovements == 0)
            return true;

        // Check for rapid submission
        if (botDetection.GetTimeSinceFirstInteraction() < 1000) // Less than 1 second
            return true;

        return false;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        // Honeypot field
        public string Website { get; set; } = string.Empty;
    }

    public class BotDetection
    {
        public int KeyPressCount { get; private set; }
        public int MouseMovements { get; private set; }
        private DateTime FirstInteraction { get; }

        public BotDetection()
        {
            FirstInteraction = DateTime.UtcNow;
        }

        public void RegisterKeyPress()
        {
            KeyPressCount++;
        }

        public void RegisterMouseMovement()
        {
            MouseMovements++;
        }

        public double GetTimeSinceFirstInteraction()
        {
            return (DateTime.UtcNow - FirstInteraction).TotalMilliseconds;
        }
    }
}